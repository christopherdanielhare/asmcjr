dfs$id <- rownames(dfs)
if(!is.null(selected.stims)){
dfs <- dfs[which(rownames(dfs) %in% selected.stims), ]
}
df <- rbind(dfi, dfs)
levs <- unique(df$id)
levs <- levs[-which(levs == "Stimulus")]
df$id <- factor(df$id, c(sort(levs), "Stimulus"))
df
dfi <- x$inds
if(is.null(dfi$id)){
dfi$id <- "A"
}
dfi$id <- as.character(dfi$id)
dfii <- sort(unique(dfi$id))
dfs <- x$stims
dfs$id <- rownames(dfs)
if(!is.null(selected.stims)){
dfs <- dfs[which(rownames(dfs) %in% selected.stims), ]
}
df <- rbind(dfi, dfs)
levs <- unique(df$id)
dfi <- x$inds
if(is.null(dfi$id)){
dfi$id <- "A"
}
dfi$id <- as.character(dfi$id)
dfii <- sort(unique(dfi$id))
dfs <- x$stims
dfs$id <- rownames(dfs)
if(!is.null(selected.stims)){
dfs <- dfs[which(rownames(dfs) %in% selected.stims), ]
}
df <- rbind(dfi, dfs)
levs <- unique(df$id)
levs1 <- dfii
levs2 <- dfs$id
df$id <- factor(df$id, c(sort(levs1), sort(levs2)))
df
ggplot(df, aes(x=Dim1, y=Dim2, label=id, colour=id)) +
geom_text(aes(size=1.5), show.legend=FALSE) +
scale_colour_manual(values=c("gray25", "gray50", rep("black", nrow(dfs))), guide="none") +  theme_bw() + theme(aspect.ratio=1)
ggplot(df, aes(x=Dim1, y=Dim2, label=id, colour=id, size=id)) +
geom_text(aes(size=id), show.legend=FALSE) +
scale_colour_manual(values=c("gray25", "gray50", rep("black", nrow(dfs))), guide="none") +
scale_size_manual(values=c(rep(1.25, length(dfii)), rep(2, nrow(dfs)))) +
theme_bw() + theme(aspect.ratio=1)
ggplot(df, aes(x=Dim1, y=Dim2, label=id, colour=id, size=id)) +
geom_text(show.legend=FALSE) +
scale_colour_manual(values=c("gray25", "gray50", rep("black", nrow(dfs))), guide="none") +
scale_size_manual(values=c(rep(1.25, length(dfii)), rep(2, nrow(dfs)))) +
theme_bw() + theme(aspect.ratio=1)
c(rep(1.25, length(dfii)), rep(2, nrow(dfs)))
ggplot(df, aes(x=Dim1, y=Dim2, label=id, colour=id, size=id)) +
geom_text(show.legend=FALSE) +
scale_colour_manual(values=c("gray25", "gray50", rep("black", nrow(dfs))), guide="none") +
scale_size_manual(values=c(rep(1.25, length(dfii)), rep(2, nrow(dfs)))) +
theme_bw() + theme(aspect.ratio=1)
ggplot(df, aes(x=Dim1, y=Dim2, label=id, colour=id, size=id)) +
geom_text(show.legend=FALSE) +
scale_colour_manual(values=c("gray25", "gray50", rep("black", nrow(dfs))), guide="none") +
scale_size_manual(values=c(rep(12.5, length(dfii)), rep(20, nrow(dfs)))) +
theme_bw() + theme(aspect.ratio=1)
ggplot(df, aes(x=Dim1, y=Dim2, label=id, colour=id, size=id)) +
geom_text(show.legend=FALSE) +
scale_colour_manual(values=c("gray25", "gray50", rep("black", nrow(dfs))), guide="none") +
scale_size_manual(values=c(rep(5, length(dfii)), rep(8, nrow(dfs)))) +
theme_bw() + theme(aspect.ratio=1)
ggplot(df, aes(x=Dim1, y=Dim2, label=id, colour=id, size=id)) +
geom_text(show.legend=FALSE) +
scale_colour_manual(values=c("gray25", "gray50", rep("black", nrow(dfs))), guide="none") +
scale_size_manual(values=c(rep(3, length(dfii)), rep(6, nrow(dfs)))) +
theme_bw() + theme(aspect.ratio=1)
ind.id.size=3; stim.id.size=6
ggplot(df, aes(x=Dim1, y=Dim2, label=id, colour=id, size=id)) +
geom_text(show.legend=FALSE) +
scale_colour_manual(values=c("gray25", "gray50", rep("black", nrow(dfs))), guide="none") +
scale_size_manual(values=c(rep(ind.id.size, length(dfii)), rep(stim.id.size, nrow(dfs)))) +
theme_bw() + theme(aspect.ratio=1)
ggplot(df, aes(x=Dim1, y=Dim2, label=id, colour=id, size=id)) +
geom_text(show.legend=FALSE) +
scale_colour_manual(values=c("gray25", "gray50", rep("black", nrow(dfs))), breaks=dfii) +
scale_size_manual(values=c(rep(ind.id.size, length(dfii)), rep(stim.id.size, nrow(dfs)))) +
theme_bw() + theme(aspect.ratio=1)
ggplot(df, aes(x=Dim1, y=Dim2, label=id, colour=id, size=id)) +
geom_text(show.legend=FALSE) +
scale_colour_manual(values=c("gray25", "gray50", rep("black", nrow(dfs))), guide="none") +
scale_size_manual(values=c(rep(ind.id.size, length(dfii)), rep(stim.id.size, nrow(dfs)))) +
scale_shape_discrete(name="ID", breaks=dfii, labels=dfii) +
theme_bw() + theme(aspect.ratio=1)
ggplot(df, aes(x=Dim1, y=Dim2, label=id, colour=id, size=id)) +
geom_text(show.legend=FALSE) +
scale_colour_manual(values=c("gray25", "gray50", rep("black", nrow(dfs)))) +
scale_size_manual(values=c(rep(ind.id.size, length(dfii)), rep(stim.id.size, nrow(dfs)))) +
scale_shape_discrete(name="ID", breaks=dfii, labels=dfii) +
theme_bw() + theme(aspect.ratio=1)
ggplot(df, aes(x=Dim1, y=Dim2, label=id, colour=id, size=id)) +
geom_text() +
scale_colour_manual(values=c("gray25", "gray50", rep("black", nrow(dfs)))) +
scale_size_manual(values=c(rep(ind.id.size, length(dfii)), rep(stim.id.size, nrow(dfs)))) +
scale_shape_discrete(name="ID", breaks=dfii, labels=dfii) +
theme_bw() + theme(aspect.ratio=1)
ggplot(df, aes(x=Dim1, y=Dim2, label=id, colour=id, size=id)) +
geom_text() +
scale_colour_manual(values=c("gray25", "gray50", rep("black", nrow(dfs))), guide="none") +
scale_size_manual(values=c(rep(ind.id.size, length(dfii)), rep(stim.id.size, nrow(dfs)))) +
scale_shape_discrete(name="ID", breaks=dfii, labels=dfii) +
theme_bw() + theme(aspect.ratio=1)
ggplot(df, aes(x=Dim1, y=Dim2, label=id, colour=id, size=id)) +
geom_text(show.legend=FALSE) +
scale_colour_manual(values=c("gray25", "gray50", rep("black", nrow(dfs))), guide="none") +
scale_size_manual(values=c(rep(ind.id.size, length(dfii)), rep(stim.id.size, nrow(dfs)))) +
scale_shape_discrete(name="ID", breaks=dfii, labels=dfii) +
theme_bw() + theme(aspect.ratio=1)
plot.mlsmu6 <- function(x, ..., selected.stims=NULL, ind.id.size=3, stim.id.size=6){
dfi <- x$inds
if(is.null(dfi$id)){
dfi$id <- "x"
}
dfi$id <- as.character(dfi$id)
dfii <- sort(unique(dfi$id))
dfs <- x$stims
dfs$id <- rownames(dfs)
if(!is.null(selected.stims)){
dfs <- dfs[which(rownames(dfs) %in% selected.stims), ]
}
df <- rbind(dfi, dfs)
levs <- unique(df$id)
levs1 <- dfii
levs2 <- dfs$id
df$id <- factor(df$id, c(sort(levs1), sort(levs2)))
ggplot(df, aes(x=Dim1, y=Dim2, label=id, colour=id, size=id)) +
geom_text(show.legend=FALSE) +
scale_colour_manual(values=c("gray25", "gray50", rep("black", nrow(dfs))), guide="none") +
scale_size_manual(values=c(rep(ind.id.size, length(dfii)), rep(stim.id.size, nrow(dfs)))) +
scale_shape_discrete(name="ID", breaks=dfii, labels=dfii) +
theme_bw() + theme(aspect.ratio=1)
}
x <- plot.mlsmu6(out)
x
x+ labs(x="Dimension 1\nD=Democrat, R=Republican")
x+ labs(x="Dimension 1\nD=Democrat, R=Republican", y="Dimension 2")
library(asmcjr)
library(asmcjr)
out <- mlsmu6(input = interest1981[,9:38], ndim=2, cutoff=5,
id=factor(interest1981$party, labels=c("D", "R")))
out$iter
tail(out$iter)
plot(out)
plot(out) + labs(x="Dimension 1\nD=Democrat, R=Republican", y="Dimension 2")
inc.stims <- c("ada", "cope", "ccus", "cc", "ll", "nfu", "ntu",
"aft", "nfib", "ccause", "aclu", "ripon")
plot(out, selected.stims=inc.stims) +
labs(x="Dimension 1\nD=Democrat, R=Republican", y="Dimension 2")
library(asmcjr)
data"denmarkEES2009")
data("denmarkEES2009")
denmarkEES2009[1,]
input.den <- denmarkEES2009[,grep("q39", names(denmarkEES2009))]
input.den[1,]
input.den <- denmarkEES2009[,c("q39_p1","q39_p2","q39_p3",
"q39_p4","q39_p5","q39_p6","q39_p7","q39_p8")]
colnames(input.den) <- c("Social Democrats", "Danish Social Liberal Party",
"Conservative Peoples Party", "Socialist Peoples Party",
"Danish Peoples Party", "Liberal Party", "Liberal Alliance",
"June Movement")
input.den[1,]
input.den[which(input.den %in% c(77,88,89),
arr.ind=T)] <- NA
input.den[1:10, ]
input.den <- input.den[which(input.den %in% c(77,88,89),
arr.ind=T)] <- NA
input.den[1:10, ]
length(input.den)
input.den
input.den <- denmarkEES2009[,c("q39_p1","q39_p2","q39_p3",
"q39_p4","q39_p5","q39_p6","q39_p7","q39_p8")]
colnames(input.den) <- c("Social Democrats", "Danish Social Liberal Party",
"Conservative Peoples Party", "Socialist Peoples Party",
"Danish Peoples Party", "Liberal Party", "Liberal Alliance",
"June Movement")
which(input.den %in% c(77,88,89),
arr.ind=T)
input.den[,1]
class(input.den)
input.den <- as.matrix(denmarkEES2009[,c("q39_p1","q39_p2","q39_p3",
"q39_p4","q39_p5","q39_p6","q39_p7","q39_p8")])
colnames(input.den) <- c("Social Democrats", "Danish Social Liberal Party",
"Conservative Peoples Party", "Socialist Peoples Party",
"Danish Peoples Party", "Liberal Party", "Liberal Alliance",
"June Movement")
input.den <- input.den[which(input.den %in% c(77,88,89),
arr.ind=T)] <- NA
input.den
input.den <- as.matrix(denmarkEES2009[,c("q39_p1","q39_p2","q39_p3",
"q39_p4","q39_p5","q39_p6","q39_p7","q39_p8")])
colnames(input.den) <- c("Social Democrats", "Danish Social Liberal Party",
"Conservative Peoples Party", "Socialist Peoples Party",
"Danish Peoples Party", "Liberal Party", "Liberal Alliance",
"June Movement")
input.den[1,]
input.den <- input.den[input.den %in% c(77,88,89)] <- NA
dim(input.den)
input.den <- as.matrix(denmarkEES2009[,c("q39_p1","q39_p2","q39_p3",
"q39_p4","q39_p5","q39_p6","q39_p7","q39_p8")])
colnames(input.den) <- c("Social Democrats", "Danish Social Liberal Party",
"Conservative Peoples Party", "Socialist Peoples Party",
"Danish Peoples Party", "Liberal Party", "Liberal Alliance",
"June Movement")
input.den[1,]
input.den == 77
input.den[1,1] == 77
which(input.den %in% c(77,88,89))
which(input.den %in% c(77,88,89), arr.ind=TRUE)
length(unput.den)
length(input.den)
input.den <- as.matrix(denmarkEES2009[,c("q39_p1","q39_p2","q39_p3",
"q39_p4","q39_p5","q39_p6","q39_p7","q39_p8")])
colnames(input.den) <- c("Social Democrats", "Danish Social Liberal Party",
"Conservative Peoples Party", "Socialist Peoples Party",
"Danish Peoples Party", "Liberal Party", "Liberal Alliance",
"June Movement")
dim(input.den)
which(input.den %in% c(77,88,89), arr.ind=TRUE)
length(input.den)
dim(input.den)
class(input.den)
which
which(input.den %in% c(77,88,89), arr.ind = TRUE)
tmp <- input.den %in% c(77,88,89)
dim(tmp)
tmp
which(input.den == 77, arr.ind=TRUE)
input.den <- as.matrix(denmarkEES2009[,c("q39_p1","q39_p2","q39_p3",
"q39_p4","q39_p5","q39_p6","q39_p7","q39_p8")])
colnames(input.den) <- c("Social Democrats", "Danish Social Liberal Party",
"Conservative Peoples Party", "Socialist Peoples Party",
"Danish Peoples Party", "Liberal Party", "Liberal Alliance",
"June Movement")
input.den <- input.den[which(input.den == 77 | input.den == 88 |
input.den == 89, arr.ind=TRUE)] <- NA
input.den[1,]
dim(input.den)
input.den <- as.matrix(denmarkEES2009[,c("q39_p1","q39_p2","q39_p3",
"q39_p4","q39_p5","q39_p6","q39_p7","q39_p8")])
colnames(input.den) <- c("Social Democrats", "Danish Social Liberal Party",
"Conservative Peoples Party", "Socialist Peoples Party",
"Danish Peoples Party", "Liberal Party", "Liberal Alliance",
"June Movement")
T <- input.den
T[T==77 | T==88 | T==89] <- NA
T
input.den <- as.matrix(denmarkEES2009[,c("q39_p1","q39_p2","q39_p3",
"q39_p4","q39_p5","q39_p6","q39_p7","q39_p8")])
colnames(input.den) <- c("Social Democrats", "Danish Social Liberal Party",
"Conservative Peoples Party", "Socialist Peoples Party",
"Danish Peoples Party", "Liberal Party", "Liberal Alliance",
"June Movement")
input.den <- input.den[input.den == 77 | input.den == 88 |
input.den == 89] <- NA
input.den[1,]
input.den <- as.matrix(denmarkEES2009[,c("q39_p1","q39_p2","q39_p3",
"q39_p4","q39_p5","q39_p6","q39_p7","q39_p8")])
colnames(input.den) <- c("Social Democrats", "Danish Social Liberal Party",
"Conservative Peoples Party", "Socialist Peoples Party",
"Danish Peoples Party", "Liberal Party", "Liberal Alliance",
"June Movement")
input.den[1,]
T <- input.den
T[T==77 | T==88 | T==89] <- NA
dim(t)
dim(T)
input.den[input.den==77 | input.den==88 | input.den==89] <- NA
input.den
input.den <- (10-input.den)/5
cutoff <- 5
input.den <- input.den[rowSums(!is.na(input.den))>=cutoff,]
dim(input.den)
weightmat <- input.den
weightmat[!is.na(input.den)] <- 1
weightmat[is.na(input.den)] <- 0
input.den[is.na(input.den)] <- mean(input.den,na.rm=TRUE)
result <- smacofRect(delta=T, ndim=2, weightmat=weightmat, init=NULL,
verbose=FALSE, itmax= 1000, reg=0.000001, eps=0.000001)
library(smacof)
install.packages("smacof")
library(smacof)
result <- smacofRect(delta=T, ndim=2, weightmat=weightmat, init=NULL,
verbose=FALSE, itmax= 1000, reg=0.000001, eps=0.000001)
help(package=smacof)
?smacofRect
result <- smacofRect(delta=T, ndim=2, weightmat=weightmat, init=NULL,
verbose=FALSE, itmax= 1000)
result <- smacofRect(delta=input.den, ndim=2, weightmat=weightmat, init=NULL,
verbose=FALSE, itmax= 1000)
result
voters <- result$conf.row
parties <- result$conf.col
if (parties[1,1] > 0){
parties[,1] <- -1 * parties[,1]
voters[,1] <- -1 * voters[,1]
}
plot(parties[,1], parties[,2],
main="Estimated Configuration of Voters (circles) and Parties",
xlab="First Dimension", ylab="Second Dimension",
xlim=c(-2.5,2.5), ylim=c(-2.5,2.5), asp=1, type="n")
points(voters[,1], voters[,2], pch=1, col="gray")
text(parties[,1], parties[,2], c("A","B","C","F","O","V","I","J"),
col="black", cex=1.4, font=2)
legend("topleft", colnames(T),
pch=c("A","B","C","F","O","V","I","J"), col="black",
text.font=2, pt.cex=1, inset=.01, bty="n")
plot(result)
class(result)
plot.smacofR
smacof:::plot.smacofR
plot(result, label.conf.rows=list(label=FALSE))
plot(result, label.conf.rows=list(label=FALSE, pch=1))
plot(result, label.conf.rows=list(label=FALSE, pch=1, col="black"))
args(smacof:::plot.smacofR)
plot(result, label.conf.rows=list(label=FALSE), col.rows="black", pch=1)
plot(result, label.conf.rows=list(label=FALSE), col.rows="gray50", pch=1)
plot(result, label.conf.rows=list(label=FALSE), col.rows="gray50", pch=1, cex=.75)
plot(result, label.conf.rows=list(label=FALSE), col.rows="gray50", pch=1, cex=.75, col.columns = "black")
plot(result, label.conf.rows=list(label=FALSE), col.rows="gray50", pch=1, cex=.75, label.conf.columns=list(label=TRUE, col="black"))
plot(result, label.conf.rows=list(label=FALSE), col.rows="gray50", pch=1, cex=.75, label.conf.columns=list(label=TRUE, col="black", cex=1.5))
plot(result, label.conf.rows=list(label=FALSE), col.rows="gray50", pch=1, cex=.75, label.conf.columns=list(label=TRUE, col="black", cex=1))
plot(result, label.conf.rows=list(label=FALSE), col.rows="gray50", pch=1, cex=.75, label.conf.columns=list(label=TRUE, col="black", cex=1, pch=20))
plot(result, label.conf.rows=list(label=FALSE), col.rows="gray50", pch=rep(c(1,16), c(996, 8)), cex=.75, label.conf.columns=list(label=TRUE, col="black", cex=1))
plot(result, label.conf.rows=list(label=FALSE), col.rows="gray50", pch=1, cex=.75, label.conf.columns=list(label=TRUE, col="black", cex=1))
plot(result, label.conf.rows=list(label=FALSE), col.rows="gray50", pch=1, cex=.75, label.conf.columns=list(label=TRUE, col="black", cex=1), asp=1)
plot(result, label.conf.rows=list(label=FALSE), col.rows="gray50", pch=1, cex=.75, label.conf.columns=list(label=TRUE, col="black", cex=1), aspect.ratio=1)
plot(result, label.conf.rows=list(label=FALSE), col.rows="gray50", pch=1, cex=.75, label.conf.columns=list(label=TRUE, col="black", cex=1), xlim=c(-15,15))
plot(result, label.conf.rows=list(label=FALSE), col.rows="gray50", pch=1, cex=.75, label.conf.columns=list(label=TRUE, col="black", cex=1), xlim=c(-1.5,1.5))
plot(result, label.conf.rows=list(label=FALSE), col.rows="gray50", pch=1, cex=.75, label.conf.columns=list(label=TRUE, col="black", cex=1), xlim=c(-1.5,1.5), ylim=c(-1.5,1.5))
plot(result, label.conf.rows=list(label=FALSE), col.rows="gray50", pch=1, cex=.75, label.conf.columns=list(label=TRUE, col="black", cex=1), xlim=c(-1.5,1.5), ylim=c(-1.5,1.5),. asp=NULL)
plot(result, label.conf.rows=list(label=FALSE), col.rows="gray50", pch=1, cex=.75, label.conf.columns=list(label=TRUE, col="black", cex=1), xlim=c(-1.5,1.5), ylim=c(-1.5,1.5), asp=NULL)
par(pty="s")
plot(result, label.conf.rows=list(label=FALSE), col.rows="gray50", pch=1, cex=.75, label.conf.columns=list(label=TRUE, col="black", cex=1), xlim=c(-1.5,1.5), ylim=c(-1.5,1.5), asp=NULL)
library(basicspace)
LR <- denmarkEES2009[,c("q46","q47_p1","q47_p2","q47_p3",
"q47_p4","q47_p5","q47_p6","q47_p7","q47_p8")]
colnames(LR) <- c("Self","Social Democrats","Danish Social Liberal Party","Conservative Peoples Party",
"Socialist Peoples Party","Danish Peoples Party","Liberal Party",
"Liberal Alliance","June Movement")
mode(LR) <- "numeric"
AM.result <- aldmck(LR,polarity=2,respondent=1,missing=c(77,88,89,99),verbose=TRUE)
LR
class(LR)
LR <- as.matrix(LR)
colnames(LR) <- c("Self","Social Democrats","Danish Social Liberal Party","Conservative Peoples Party",
"Socialist Peoples Party","Danish Peoples Party","Liberal Party",
"Liberal Alliance","June Movement")
mode(LR) <- "numeric"
AM.result <- aldmck(LR,polarity=2,respondent=1,missing=c(77,88,89,99),verbose=TRUE)
ols <- lm(AM.result$stimuli ~ parties[,1] + parties[,2])
summary(ols)$coefficients
printCoefMat(summary(ols)$coefficients)
printCoefmat(summary(ols)$coefficients)
N1 <- ols$coefficients[2] /
(sqrt((ols$coefficients[2]^2) + (ols$coefficients[3]^2)))
N2 <- ols$coefficients[3] /
(sqrt((ols$coefficients[2]^2) + (ols$coefficients[3]^2)))
Na
N1
N2
exp.factor <- 3
segments(exp.factor*-N1, exp.factor*-N2,
exp.factor*N1, exp.factor*N2, lwd=2, lty=2)
text(2.1, -0.7, "Projection of\nLeft-Right\nScores", cex=1.1, font=2)
plot(parties[,1], parties[,2],
main="Estimated Configuration of Voters and Parties",
xlab="First Dimension", ylab="Second Dimension",
xlim=c(-2.5,2.5), ylim=c(-2.5,2.5), asp=1, type="n")
points(voters[,1], voters[,2], pch=1, col="gray")
text(parties[,1], parties[,2], c("A","B","C","F","O","V","I","J"),
col="black", cex=1.4, font=2)
legend("topleft", colnames(T),
pch=c("A","B","C","F","O","V","I","J"), col="black",
text.font=2, pt.cex=1, inset=.01, bty="n")
exp.factor <- 3
segments(exp.factor*-N1, exp.factor*-N2,
exp.factor*N1, exp.factor*N2, lwd=2, lty=2)
text(2.1, -0.7, "Projection of\nLeft-Right\nScores",
cex=1.1, font=2)
plot(parties[,1], parties[,2],
main="Estimated Configuration of Voters and Parties",
xlab="First Dimension", ylab="Second Dimension",
xlim=c(-2.5,2.5), ylim=c(-2.5,2.5), asp=1, type="n")
points(voters[,1], voters[,2], pch=1, col="gray")
text(parties[,1], parties[,2], c("A","B","C","F","O","V","I","J"),
col="black", cex=1.4, font=2)
legend("topleft", colnames(T),
pch=c("A","B","C","F","O","V","I","J"), col="black",
text.font=2, pt.cex=1, inset=.01, bty="n")
exp.factor <- 3
segments(exp.factor*-N1, exp.factor*-N2,
exp.factor*N1, exp.factor*N2, lwd=2, lty=2)
plot(parties[,1], parties[,2],
main="Estimated Configuration of Voters and Parties",
xlab="First Dimension", ylab="Second Dimension",
xlim=c(-2.5,2.5), ylim=c(-2.5,2.5), asp=1, type="n")
points(voters[,1], voters[,2], pch=1, col="gray")
text(parties[,1], parties[,2], c("A","B","C","F","O","V","I","J"),
col="black", cex=1.4, font=2)
legend("topleft", colnames(T),
pch=c("A","B","C","F","O","V","I","J"), col="black",
text.font=2, pt.cex=1, inset=.01, bty="n")
par(pty="s")
plot(result, label.conf.rows=list(label=FALSE),
col.rows="gray50", pch=1, cex=.75,
label.conf.columns=list(label=TRUE, col="black", cex=1),
xlim=c(-1.5,1.5), ylim=c(-1.5,1.5), asp=NULL)
exp.factor <- 3
segments(exp.factor*-N1, exp.factor*-N2,
exp.factor*N1, exp.factor*N2, lwd=2, lty=2)
getwd()
dyn.load("~/Dropbox/Spatial R Book 2 (1)/Draft/bayesianunfoldingmac.so")
ls()
library(asmcjr)
d
data()
data("ANES1968"
)
T <- ANES1968[,1:12]
T <- as.matrix(T)
vote.turnout <- ANES1968[,13]
presidential.vote <- ANES1968[,14]
print(T[1:5,1:6])
cutoff <- 5
vote.turnout <- vote.turnout[rowSums(!is.na(T))>=cutoff]
presidential.vote <- presidential.vote[rowSums(!is.na(T))>=cutoff]
T <- T[rowSums(!is.na(T))>=cutoff,]
T <- (100-T)/50
nrowX <- nrow(T)
ncolX <- ncol(T)
nburn <- 500
nslice <- 1500
NS <- 2
N <- NS*(nrowX+ncolX) - ((NS*(NS+1))/2)
NDIM <- NS*(nrowX+ncolX) - (NS-1)
UNFOLD <- 1
NMISSING <- 7
TT <- T
#This one creates errors for 22
TT[is.na(TT)] <- NA
X <- as.vector(t(TT))
CONSTRAINTS <- rep(1,NS*(nrowX+ncolX))
CONSTRAINTS[(NS*(nrowX+ncolX)-NS):(NS*(nrowX+ncolX))] <- 0
set_globals <- function(nslice,nburn,nrowX,ncolX,NS,N,NDIM,UNFOLD,
NMISSING,X,CONSTRAINTS) {
res <-  .C("copyFromR",
as.integer(nslice),
as.integer(nburn),
as.integer(nrowX),
as.integer(ncolX),
as.integer(NS),
as.integer(N),
as.integer(NDIM),
as.integer(UNFOLD),
as.integer(NMISSING),
as.double(X),
as.double(CONSTRAINTS))
}
set_globals(nslice,nburn,nrowX,ncolX,NS,N,NDIM,UNFOLD,
NMISSING,X,CONSTRAINTS)
dyn.load("c:/Dropbox/Spatial R Book/B-P_DS/lbfgs_jeff.dll")
dyn.load("~/Dropbox/Spatial R Book/B-P_DS/lbfgs_jeff.dll")
library(foreign)
dat <- read.dta("http://www.quantoid.net/files/9591/anes2008_binary.dta")
dat$race <- 1 + dat$white + 2*dat$black
dat$race <- factor(dat$race, levels=1:3, labels=c("Other", "White", "Black"))
mod <- glm(voted ~ age + educ + income + poly(leftright, 2) +
female + race, data=dat, family=binomial(link="logit"))
library(haven)
dat <- read_dta("http://www.quantoid.net/files/9591/anes2008_binary.dta")
dat$race <- 1 + dat$white + 2*dat$black
dat$race <- factor(dat$race, levels=1:3, labels=c("Other", "White", "Black"))
mod <- glm(voted ~ age + educ + income + poly(leftright, 2) +
female + race, data=dat, family=binomial(link="logit"))
summary(mod)
exp(.284)
X <- model.matrix(mod)
X <- model.matrix(mod)
X2 <- X
X[, "education"] <- 13
X2[, "education"] <- 17
colnames(X)
X <- model.matrix(mod)
X2 <- X
X[, "educ"] <- 13
X2[, "educ"] <- 17
p1 <- plogis(X %*% b)
p2 <- plogis(X2 %*% b)
b <- coef(mod)
p1 <- plogis(X %*% b)
p2 <- plogis(X2 %*% b)
m <- glm(voted ~ educ + female , data=dat, family=binomial(link="logit"))
summary(m)
m <- glm(voted ~ educ + race , data=dat, family=binomial(link="logit"))
summary(m)
predict(m , newdata=data.frame(educ=c(13,17), race="White"))
predict(m , newdata=data.frame(educ=c(13,17), race="White"), type="response")
diff(predict(m , newdata=data.frame(educ=c(13,17), race="White"), type="response"))
diff(predict(m , newdata=data.frame(educ=c(13,17), race="Black"), type="response"))
predict(m , newdata=data.frame(educ=c(13,17), race="Black"), type="response")
diff <- p2-p1
quartz()
hist(diff)
library(DAMisc)
glmChange(mod, dat, diffchange="sd")
library(devtools)
d1const <- c(posStims[1], negStims[1])
d2const <- c(posStims[2], negStims[2])
d1const2 <- d2const2 <- c("T(0, )", "T(,0)")
d1const2 <- d1const2[order(d1const)]
d1const <- sort(d1const)
d2const2 <- d2const2[order(d2const)]
d2const <- sort(d2const)
for(i in 1:nZ){
if(is.na(z[i,1])){
m1 <- paste(m1, "\nz[", i,", 1] ~ dnorm(0,.01)", ifelse(i %in% d1const, d1const2[which(d1const == i)], ""), sep="")
}
if(is.na(z[i,2])){
m1 <- paste(m1, "\nz[", i,", 2] ~ dnorm(0,.01)", ifelse(i %in% d2const, d2const2[which(d2const == i)], ""), sep="")
}
}
m1 <- paste(m1, "\n}",sep="")
if(is.null(fname))stop("Must specify a file name to write the code to")
cat(m1, file=fname)
data <- as.matrix(data)
args$file <- fname
args$data <- list('N'=nrow(data), dstar = as.matrix(max(data)-data), z=z)
mod.sim <- do.call("jags.model", args)
cat(m1)
m1 <- "model{
for (i in 1:(N-1)){
for (j in (i+1):N){
dstar[i,j] ~ dlnorm(mu[i,j],tau)
mu[i,j] <- log(sqrt((z[i,1]-z[j,1])*(z[i,1]-z[j,1])+(z[i,2]-z[j,2])*(z[i,2]-z[j,2])))
}
}
tau ~ dunif(0,10)"
nZ <- nrow(data)
posStims <- c(7,2)
negStims <- c(9,8)
d1const <- c(posStims[1], negStims[1])
d2const <- c(posStims[2], negStims[2])
d1const2 <- d2const2 <- c("T(0, )", "T(,0)")
d1const2 <- d1const2[order(d1const)]
d1const <- sort(d1const)
d2const2 <- d2const2[order(d2const)]
d2const <- sort(d2const)
for(i in 1:nZ){
if(is.na(z[i,1])){
m1 <- paste(m1, "\nz[", i,", 1] ~ dnorm(0,.01)", ifelse(i %in% d1const, d1const2[which(d1const == i)], ""), sep="")
}
if(is.na(z[i,2])){
m1 <- paste(m1, "\nz[", i,", 2] ~ dnorm(0,.01)", ifelse(i %in% d2const, d2const2[which(d2const == i)], ""), sep="")
}
}
m1 <- paste(m1, "\n}",sep="")
if(is.null(fname))stop("Must specify a file name to write the code to")
cat(m1, file=fname)
data <- as.matrix(data)
args$file <- fname
args$data <- list('N'=nrow(data), dstar = as.matrix(max(data)-data), z=z)
mod.sim <- do.call("jags.model", args)
samples <- coda.samples(mod.sim,'z',  n.sample,  thin=1)
n.sample=2500
samples <- coda.samples(mod.sim,'z',  n.sample,  thin=1)
zhat <- samples
for(i in 1:length(zhat)){colnames(zhat[[i]]) <- colnames(data$stims)}
zhat.sum <- summary(zhat)
zhat.ci <- data.frame("stimulus" = factor(colnames(data), levels=colnames(data)[order(zhat.sum$statistics[1:nZ])]),
"idealpt" = zhat.sum$statistics[,1],
"sd" = zhat.sum$statistics[,2],
"lower" = zhat.sum$quantiles[,1],
"upper" = zhat.sum$quantiles[,5])
for(i in 1:length(zhat)){colnames(zhat[[i]]) <- colnames(data)}
outer(colnames(data), c("D1", "D2"), paste0)
zhat.sum <- summary(zhat)
zhat.ci <- data.frame("stimulus" = c(outer(colnames(data), c(" D1", " D2"), paste0)),
"idealpt" = zhat.sum$statistics[,1],
"sd" = zhat.sum$statistics[,2],
"lower" = zhat.sum$quantiles[,1],
"upper" = zhat.sum$quantiles[,5])
zhat.ci
rownames(zhat.ci) <- NULL
rm(list=ls())
gray.palette <- function(n, lower=.3, upper=.7){
s <- seq(lower, upper, length=n)
rgb(matrix(rep(s, each=3), ncol=3, byrow=T))
}
ggplot.resphist <- function(result, groupVar=NULL, addStim = FALSE, scaleDensity=TRUE,
weights=c("all", "positive", "negative"), xlab=NULL,
main = NULL, ylab=NULL, whichRes=NULL, dim=NULL, ...){
w <- match.arg(weights)
shapes <- c(15,16,18, 24, 25, 0,1,2,3,4,5,6,7)
if(class(result) == "aldmck"){
v <- result$respondents
}
if(class(result) == "blackbox"){
if(is.null(dim)){stop("For blackbox, 'dim' must be specified\n")}
if(is.null(whichRes)){wres <- dim}
else{wres <- whichRes}
v <- data.frame("idealpt" = result$individuals[[wres]][,dim], "weight" = 1)
}
if(!is.null(groupVar)){
v$stimulus <- groupVar
}
v <- na.omit(v)
xl <- ifelse(is.null(xlab), "Ideal Points", xlab)
yl <- ifelse(is.null(ylab), "Density", ylab)
main <- ifelse(is.null(main), "", main)
if(is.null(groupVar)){
if(w == "all"){
g <- ggplot(v, aes(x=idealpt)) +  xlab(xl) + ylab(yl) + ggtitle(main) +stat_density(geom="line") + theme_bw()
}
if(w == "positive"){
posv <- v[which(v$weight > 0),]
xl <- paste0(xl, " (n=", nrow(posv), ")")
g <- ggplot(posv, aes(x=idealpt)) +  xlab(xl) + ylab(yl) + ggtitle(main) + stat_density(geom="line")  + theme_bw()
}
if(w == "negative"){
negv <- v[which(v$weight < 0),]
xl <- paste0(xl, " (n=", nrow(negv), ")")
g <- ggplot(negv, aes(x=idealpt)) +  xlab(xl) + ylab(yl) + ggtitle(main)+ stat_density(geom="line")  + theme_bw()
}
}
else{
ng <- length(table(v$stimulus))
if(w == "all"){
props <- table(v$stimulus)/sum(table(v$stimulus))
bd <- by(v$idealpt, list(v$stimulus), density)
lens <- sapply(bd, function(z)length(z$x))
w0 <- which(lens == 0)
if(length(w0) > 0){
for(j in length(w0):1){bd[[w0[j]]] <- NULL}
}
for(i in 1:length(bd)){
if(scaleDensity)bd[[i]]$y <- bd[[i]]$y*props[i]
bd[[i]]$stimulus <- factor(i, levels=1:length(bd), labels=names(bd))
}
bd <- lapply(bd, function(z)data.frame("idealpt" = z$x, "Density"=z$y, "stimulus"=z$stimulus))
bd <- do.call(rbind, bd)
g <- ggplot(bd, aes(x=idealpt, y=Density, group=stimulus, color=stimulus)) + geom_line() + scale_color_manual(values=gray.palette(ng)) +
xlab(xl) + ylab(yl) + ggtitle(main) + theme_bw()
}
if(w == "positive"){
posv <- v[which(v$weight > 0),]
xl <- paste0(xl, " (n=", nrow(posv), ")")
props <- table(posv$stimulus)/sum(table(posv$stimulus))
bd <- by(posv$idealpt, list(posv$stimulus), density)
lens <- sapply(bd, function(z)length(z$x))
w0 <- which(lens == 0)
if(length(w0) > 0){
for(j in length(w0):1){bd[[w0[j]]] <- NULL}
}
for(i in 1:length(bd)){
if(scaleDensity)bd[[i]]$y <- bd[[i]]$y*props[i]
bd[[i]]$stimulus <- factor(i, levels=1:length(bd), labels=names(bd))
}
bd <- lapply(bd, function(z)data.frame("idealpt" = z$x, "Density"=z$y, "stimulus"=z$stimulus))
bd <- do.call(rbind, bd)
g <- ggplot(bd, aes(x=idealpt, y=Density, group=stimulus, color=stimulus)) + geom_line() + scale_color_manual(values=gray.palette(ng)) +
xlab(xl) + ylab(yl) + ggtitle(main) + theme_bw()
}
if(w == "negative"){
negv <- v[which(v$weight < 0),]
xl <- paste0(xl, " (n=", nrow(negv), ")")
props <- table(negv$stimulus)/sum(table(negv$stimulus))
bd <- by(negv$idealpt, list(negv$stimulus), density)
lens <- sapply(bd, function(z)length(z$x))
w0 <- which(lens == 0)
if(length(w0) > 0){
for(j in length(w0):1){bd[[w0[j]]] <- NULL}
}
for(i in 1:length(bd)){
if(sacleDensity)bd[[i]]$y <- bd[[i]]$y*props[i]
bd[[i]]$stimulus <- factor(i, levels=1:length(bd), labels=names(bd))
}
bd <- lapply(bd, function(z)data.frame("idealpt" = z$x, "Density"=z$y, "stimulus"=z$stimulus))
bd <- do.call(rbind, bd)
g <- ggplot(bd, aes(x=idealpt, y=Density, group=stimulus, color=stimulus)) + geom_line() + scale_color_manual(values=gray.palette(ng)) +
xlab(xl) + ylab(yl) + ggtitle(main) + theme_bw()
}
}
if(addStim){
tmp <- na.omit(result$stimuli)
if(!is.null(groupVar)){
tmp <- tmp[which(names(tmp) %in% unique(groupVar))]
n <- names(tmp)
p <- data.frame("idealpt" = tmp, "stimulus" = factor(n, levels=n[order(tmp)]))
g <- g + geom_point(data=p, aes(y=0, group=stimulus, pch=stimulus, col=stimulus, size=2.5)) +
scale_shape_manual(values=shapes[1:nrow(p)]) + theme_bw() + scale_size(2.5, guide=FALSE)
}
else{
n <- names(tmp)
p <- data.frame("idealpt" = tmp, "stimulus" = factor(n, levels=n[order(tmp)]))
g <- g + geom_point(data=p, aes(y=0, group=stimulus, pch=stimulus, col=stimulus, size=2.5)) +
scale_shape_manual(values=shapes[1:nrow(p)]) + scale_color_manual(values=gray.palette(nrow(p))) +
theme_bw() + scale_size(2.5, guide=FALSE)
}
}
return(g)
}
boot.aldmck <- function(data, ..., boot.args=list(), plot=FALSE){
dot.args <- as.list(match.call(expand.dots = FALSE)$`...`)
boot.fun <- function(data, inds, dot.args, ...){
tmp <- data[inds, ]
dot.args$data <- tmp
out <- do.call("aldmck", dot.args)
out$stimuli
}
boot.args$data <- data
boot.args$statistic=boot.fun
boot.args$dot.args=dot.args
b <- do.call("boot", boot.args)
out <- data.frame(
"stimulus"= factor(names(b$t0), levels=names(b$t0)[order(b$t0)]),
"idealpt" = b$t0,
"sd" = apply(b$t, 2, sd))
rownames(out) <- NULL
out$lower <- out$idealpt - 1.96*out$sd
out$upper <- out$idealpt + 1.96*out$sd
out <- out[order(out$idealpt), ]
class(out) <- c("aldmck_ci", "data.frame")
return(list(sumstats=out, bootres=b))
}
boot.blackbox <- function(data, missing, dims=1, minscale, verbose=FALSE, posStimulus = 1, R=100){
dot.args <- as.list(match.call(expand.dots = FALSE)$`...`)
orig <- blackbox(data, missing=missing, dims=dims, minscale=minscale, verbose=verbose)
if(orig$individuals[[dims]][posStimulus, 1] < 0){
orig$individuals[[dims]][,1] <- -orig$individuals[[dims]][,1]
}
sample.dat <- lapply(1:R, function(i)data[,sample(1:ncol(data), ncol(data), replace=TRUE)])
for(i in 1:length(sample.dat))colnames(sample.dat[[i]]) <- 1:ncol(sample.dat[[i]])
out <- array(dim=c(nrow(data), dims, R))
for(i in 1:R){
tmp <- blackbox(sample.dat[[i]], missing=missing, dims=dims, minscale=minscale, verbose=verbose)
if(tmp$individuals[[dims]][posStimulus, 1] < 0){
tmp$individuals[[dims]][,1] <- -tmp$individuals[[dims]][,1]
}
out[,,i] <- as.matrix(tmp$individuals[[dims]])
}
class(out) <- "bootbb"
invisible(out)
}
boot.blackbox_transpose <- function(data, missing, dims=1, minscale, verbose=FALSE, posStimulus = 1, R=100){
out <- array(dim=c(ncol(data), dims, R))
for(i in 1:R){
tmp <- rankings[sample(1:nrow(rankings),
nrow(rankings), replace=TRUE),]
result <- blackbox_transpose(tmp,missing=missing,
dims=dims, minscale=minscale, verbose=verbose)
if(result$stimuli[[dims]][posStimulus,2] > 0)
result$stimuli[[dims]][,2] <- -1 *
result$stimuli[[dims]][,2]
out[,,i] <- as.matrix(result$stimuli[[dims]][,2:((2+dims)-1)])
}
return(out)
}
plot.aldmck_ci <- function(x, ...){
g <- ggplot(x, aes(x=idealpt, y=stimulus)) + geom_point() + geom_errorbarh(aes(xmin = lower, xmax=upper), height=0) + theme_bw()
return(g)
}
bamPrep <- function(x, nmin=1, missing=NULL, self=1, midpt=NULL){
x <- as.matrix(x)
if(!is.numeric(x[,1])){stop("x must be a numeric data frame or matrix")}
x[which(x %in% missing, arr.ind=T)] <- NA
if(is.null(midpt)){
x <- apply(x, 2, function(z)z-(min(z, na.rm=TRUE) + diff(range(z, na.rm=TRUE))/2))
}
else{
x <- apply(x, 2, function(z)z-midpt)
}
nonmiss <- apply(x, 1, function(z)sum(!is.na(z)))
x <- x[which(nonmiss >= nmin), ]
out <- list(stims = x[,-self], self= x[,self])
class(out) <- c("bamPrep", "list")
out
}
print.aldmck_ci <- function(x, ..., digits=3){
x$idealpt <- sprintf(paste0("%.", digits, "f"), x$idealpt)
x$sd <- sprintf(paste0("%.", digits, "f"), x$sd)
x$lower <- sprintf(paste0("%.", digits, "f"), x$lower)
x$upper <- sprintf(paste0("%.", digits, "f"), x$upper)
print.data.frame(x)
}
BAM <- function(data, polarity, zhatSave=TRUE, abSave=FALSE, resp.idealpts=FALSE, n.sample = 2500, ...){
if(!("bamPrep" %in% class(data)))stop("Data should be output from the bamPrep function")
args <- as.list(match.call(expand.dots = FALSE)$`...`)
if(!("n.chains" %in% names(args)))args$n.chains = 2
if(!("n.adapt" %in% names(args)))args$n.adapt = 10000
if(!("inits" %in% names(args))){
orig <- aldmck(na.omit(data$stims), respondent=0, polarity=polarity, verbose=FALSE)
args$inits <- function(){list(zhatstar = orig$stimuli + rnorm(length(orig$stimuli), 0, 1))}
}
args$file <- system.file("templates/BAM_JAGScode.bug", package="asmcjr")
args$data <- list('z'=data$stims, q = ncol(data$stims), N=nrow(data$stims))
mod.sim <- do.call("jags.model", args)
if(zhatSave & !abSave){
samples <- coda.samples(mod.sim,'zhat',  n.sample,  thin=1)
zhat <- samples
for(i in 1:length(zhat)){colnames(zhat[[i]]) <- colnames(data$stims)}
zhat.sum <- summary(zhat)
zhat.ci <- data.frame("stimulus" = factor(colnames(data$stims), levels=colnames(data$stims)[order(zhat.sum$statistics)]),
"idealpt" = zhat.sum$statistics[,1],
"sd" = zhat.sum$statistics[,2],
"lower" = zhat.sum$quantiles[,1],
"upper" = zhat.sum$quantiles[,5])
rownames(zhat.ci) <- NULL
class(zhat.ci) <- c("aldmck_ci", "data.frame")
res.list = list(zhat=zhat, zhat.ci = zhat.ci)
}
if(abSave & !zhatSave){
samples <- coda.samples(mod.sim, c('a', 'b'),  n.sample,  thin=1)
a <- samples[,grep("^a", colnames(samples[[1]]))]
b <- samples[,grep("&b", colnames(samples[[1]]))]
res.list = list(a=a, b=b)
}
if(abSave & zhatSave){
samples <- coda.samples(mod.sim, c('zhat', 'a', 'b'),  n.sample,  thin=1)
zhat <- samples[,grep("^z", colnames(samples[[1]]))]
for(i in 1:length(zhat)){colnames(zhat[[i]]) <- colnames(data$stims)}
zhat.sum <- summary(zhat)
zhat.ci <- data.frame("stimulus" = factor(colnames(data$stims), levels=colnames(data$stims)[order(zhat.sum$statistics)]),
"idealpt" = zhat.sum$statistics[,1],
"sd"= zhat.sum$statistics[,2],
"lower" = zhat.sum$quantiles[,1],
"upper" = zhat.sum$quantiles[,5])
rownames(zhat.ci) <- NULL
class(zhat.ci) <- c("aldmck_ci", "data.frame")
a <- samples[,grep("^a", colnames(samples[[1]]))]
b <- samples[,grep("^b", colnames(samples[[1]]))]
res.list  = list(zhat=zhat, zhat.ci = zhat.ci, a=a, b=b)
}
if(resp.idealpts){
amat <- do.call(rbind, res.list$a)
bmat <- do.call(rbind, res.list$b)
diffs <- t(apply(amat, 1, function(x)data$self-x))
resp.ideals <- diffs /bmat
resp.ideal.summary <-  t(apply(resp.ideals, 2, quantile, c(.025, .5, .975), na.rm=T))
resp.ideal.summary <- as.data.frame(resp.ideal.summary)
names(resp.ideal.summary) <- c("lower", "median", "upper")
res.list$resp.samples=resp.ideals
res.list$resp.summary = resp.ideal.summary
}
invisible(res.list)
}
diffStims <- function(x, stims, digits=3, ...){
if("mcmc.list" %in% class(x)){
x <- do.call("rbind", x)
}
if(!(is.matrix(x) | is.data.frame(x)))stop("x must be a matrix or data frame of MCMC or resampled values\n")
x <- as.matrix(x)
if(!is.numeric(stims)){
stims <- match(stims, colnames(x))
}
combs <- combn(stims, 2)[,,drop=FALSE]
D <- matrix(0, ncol=ncol(combs), nrow=ncol(x))
D[cbind(combs[1,], 1:ncol(combs))] <- -1
D[cbind(combs[2,], 1:ncol(combs))] <- 1
diffs <- x %*%D
probs <- colMeans(diffs > 0)
comps <- paste("Pr(", colnames(x)[combs[2, ]], " > ", colnames(x)[combs[1,]], ")", sep="")
result <- data.frame('Comparison'=comps, 'Probability'=sprintf(paste0("%.", digits, "f"), probs))
result
}
aldmckSE <- function(obj, data, ...){
tmp <- na.omit(cbind(obj$respondents[,1:2], data))
alpha <- tmp[,1]
beta <- tmp[,2]
z <- tmp[,3:ncol(tmp)]
zhat <- obj$stimuli
sigmaj <- rep(0,length(zhat))
#generate sigma j
for (j in 1:length(zhat)){
for (i in 1:length(alpha)){
sigmaj[j] <- sigmaj[j]+((alpha[i] + beta[i]*zhat[j]) - z[i,j])^2
}}
for (i in 1:length(zhat)){
sigmaj[i] <- sqrt((sigmaj[i]/length(alpha)))
}
sigmaj
}
ggplot.blackbox <- function(result, dims, whichRes=NULL, groupVar=NULL, issueVector=NULL,
data=NULL, missing=NULL, rug=FALSE, xlab=NULL, main = NULL, ylab=NULL, nudgeX=NULL, nudgeY=NULL,...){
wres <- ifelse(is.null(whichRes), max(dims), whichRes)
dimdat <- result$individuals[[wres]][,dims]
names(dimdat) <- c("x", "y")
if(is.null(groupVar)){
g <- ggplot(dimdat, aes(x=x, y=y)) + geom_point(shape=1, col="gray65") + theme_bw()
}
else{
dimdat$group = groupVar
dimdat$pch = substr(as.character(dimdat$group), 1, 1)
ng <- length(unique(na.omit(groupVar)))
g <- ggplot(dimdat, aes(x=x, y=y)) +
geom_point(aes(group=group, col=group), alpha=0) +
geom_text(aes(group=group, col=group, label=pch), show.legend=FALSE) +
scale_color_manual(values=gray.palette(ng)) +
guides(colour = guide_legend("Grouping", override.aes = list(size = 2, alpha = 1))) +
theme_bw()
}
if(rug){
g <- g+geom_rug(show.legend=FALSE)
}
if(is.null(xlab)){
xlab <- paste0("Dimension ", dims[1])
}
if(is.null(ylab)){
ylab <- paste0("Dimension ", dims[2])
}
g <- g+ylab(ylab) + xlab(xlab)
if(!is.null(issueVector)){
if(is.null(data))stop("If you want to plot issue vectors, you need to specify the data\n")
if(is.character(issueVector)){
iss <- match(issueVector, colnames(data))
if(length(iss) != length(issueVector))stop("At least one of the specified issues didn't match names in the data\n")
}
else{
iss <- issueVector
}
dv <- data[,iss, drop=FALSE]
dv[which(dv %in% missing, arr.ind=TRUE)] <- NA
dv <- do.call("data.frame", lapply(1:ncol(dv), function(x)as.factor(dv[,x])))
names(dv) <- colnames(data)[iss]
op <- list()
for(i in 1:ncol(dv)){
op[[i]] <- polr(dv[,i] ~ x + y, data=dimdat, method="probit")
}
b <- sapply(op, function(x)x$coef)
Nvals <- apply(b, 2, function(x)x/sqrt(sum(x^2)))
scale.fac <- min(apply(dimdat[,1:2], 2, function(x)diff(range(x, na.rm=TRUE)))/2)
for(i in 1:ncol(Nvals)){
tmp <- data.frame(x=c(0, scale.fac*Nvals[1,i]), y=c(0, scale.fac*Nvals[2,i]))
g <- g + geom_line(data=tmp, arrow = arrow(length=unit(0.30,"cm"), ends="first", type = "closed"), size=1.1) +
geom_line(data=-tmp, arrow = arrow(length=unit(0.30,"cm"), ends="last", type = "closed"), size=1.1)
}
if(is.null(nudgeX)){nudgeX <- rep(0, ncol(Nvals))}
if(is.null(nudgeY)){nudgeY <- rep(0, ncol(Nvals))}
colnames(Nvals) <- colnames(data)[iss]
nvals <- t(-Nvals*scale.fac)
nvals <- as.data.frame(nvals)
g <- g + geom_text(data=nvals, aes(x=x, y=y, label=rownames(nvals), size=2),
nudge_x = nudgeX, nudge_y=nudgeY, show.legend=FALSE)
}
return(g)
}
doubleCenter <- function(x){
p <- dim(x)[1]
n <- dim(x)[2]
-(x-matrix(apply(x,1,mean),nrow=p,ncol=n) -
t(matrix(apply(x,2,mean),nrow=n,ncol=p)) + mean(x))/2
}
BMDS <- function(data, posStims, negStims, z, fname=NULL, n.sample = 2500, ...){
args <- as.list(match.call(expand.dots = FALSE)$`...`)
if(!("n.chains" %in% names(args)))args$n.chains = 2
if(!("n.adapt" %in% names(args)))args$n.adapt = 10000
if(!("inits" %in% names(args))){
z.init <- array(runif(2*nrow(z), -5, 5), dim=dim(z))
z.init[which(!is.na(z))] <- NA
z.init[posStims[1], 1] <- abs(z.init[posStims[1], 1] )
z.init[posStims[2], 2] <- abs(z.init[posStims[2], 2] )
z.init[negStims[1], 1] <- -abs(z.init[negStims[1], 1] )
z.init[negStims[2], 2] <- -abs(z.init[negStims[2], 2] )
args$inits <- function(){list(z=z.init)}
}
m1 <- "model{
for (i in 1:(N-1)){
for (j in (i+1):N){
dstar[i,j] ~ dlnorm(mu[i,j],tau)
mu[i,j] <- log(sqrt((z[i,1]-z[j,1])*(z[i,1]-z[j,1])+(z[i,2]-z[j,2])*(z[i,2]-z[j,2])))
}
}
tau ~ dunif(0,10)"
nZ <- nrow(data)
d1const <- c(posStims[1], negStims[1])
d2const <- c(posStims[2], negStims[2])
d1const2 <- d2const2 <- c("T(0, )", "T(,0)")
d1const2 <- d1const2[order(d1const)]
d1const <- sort(d1const)
d2const2 <- d2const2[order(d2const)]
d2const <- sort(d2const)
for(i in 1:nZ){
if(is.na(z[i,1])){
m1 <- paste(m1, "\nz[", i,", 1] ~ dnorm(0,.01)", ifelse(i %in% d1const, d1const2[which(d1const == i)], ""), sep="")
}
if(is.na(z[i,2])){
m1 <- paste(m1, "\nz[", i,", 2] ~ dnorm(0,.01)", ifelse(i %in% d2const, d2const2[which(d2const == i)], ""), sep="")
}
}
m1 <- paste(m1, "\n}",sep="")
if(is.null(fname))stop("Must specify a file name to write the code to")
cat(m1, file=fname)
data <- as.matrix(data)
args$file <- fname
args$data <- list('N'=nrow(data), dstar = as.matrix(max(data)-data), z=z)
mod.sim <- do.call("jags.model", args)
samples <- coda.samples(mod.sim,'z',  n.sample,  thin=1)
zhat <- samples
zhat.sum <- summary(zhat)
zhat.ci <- data.frame("stimulus" = c(outer(colnames(data), c(" D1", " D2"), paste0)),
"idealpt" = zhat.sum$statistics[,1],
"sd" = zhat.sum$statistics[,2],
"lower" = zhat.sum$quantiles[,1],
"upper" = zhat.sum$quantiles[,5])
rownames(zhat.ci) <- NULL
res.list = list(zhat=zhat, zhat.ci = zhat.ci)
invisible(res.list)
}
ls()
install_local("~/asmcjr")
library(devtools)
install_local("~/asmcjr")
runif
args(bamPrep)
bamPrep
load("~/asmcjr/data/nations.rda")
nations
library(asmcjr)
library(asmcjr)
